require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

def ccache_enabled?(p); return ENV['USE_CCACHE'] == '1' if ENV['USE_CCACHE']; p['apple.ccacheEnabled'] == 'true'; end
ENV['RCT_NEW_ARCH_ENABLED'] ||= '0' if podfile_properties['newArchEnabled'] == 'false'
platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
prepare_react_native_project!

target 'nodchat' do
  use_expo_modules!

  config_command = if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    ['node','-e',"process.argv=['','','config'];require('@react-native-community/cli').run()"]
  else
    ['npx','expo-modules-autolinking','react-native-config','--json','--platform','ios']
  end
  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => true,
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(installer, config[:reactNativePath], :mac_catalyst_enabled => false, :ccache_enabled => ccache_enabled?(podfile_properties))

    # RNFirebase frameworks: allow non-modular React headers (keep!)
    installer.pods_project.targets.each do |t|
      if t.name.start_with?('RNFB')
        t.build_configurations.each do |bc|
          bc.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        end
      end
    end

    # Make sure C is modern enough to avoid implicit-int (no need for C++20 with New Arch off)
    installer.pods_project.targets.each do |t|
      t.build_configurations.each do |bc|
        bc.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu11'
        cur = bc.build_settings['OTHER_CFLAGS']
        bc.build_settings['OTHER_CFLAGS'] =
          if cur.nil? then ['$(inherited)','-std=gnu11']
          elsif cur.is_a?(Array) then (cur + ['-std=gnu11']).uniq
          else cur.include?('-std=gnu11') ? cur : "#{cur} -std=gnu11"
          end
      end
    end
  end
end
